# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
#
#name: Python application
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#permissions:
#  contents: read
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up Python 3.10
#      uses: actions/setup-python@v3
#      with:
#        python-version: "3.10"
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8 pytest
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#    - name: Lint with flake8
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#    - name: Test with pytest
#      run: |
#        pytest
#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Deploy to Production
#        run: |
#          echo "Starting deployment..."
#          # Replace this echo with actual deployment commands, for example:
#          # ssh user@your-server "cd /path/to/project && git pull && systemctl restart your-service"


name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH key
      run: |
        echo "${{ secrets.EC2_KEY }}" > key.pem
        chmod 400 key.pem

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Pull code from GitHub (or use rsync/scp to copy)
          # If you are not using Git on EC2, use rsync in the next step
          cd /home/${{ secrets.EC2_USERNAME }}/app-folder
          git pull origin main

          # Example: install dependencies and restart service
          pip install -r requirements.txt
          pm2 restart app.py || python3 app.py &
        EOF
